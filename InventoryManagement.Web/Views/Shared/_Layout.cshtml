@* InventoryManagement.Web/Views/Shared/_Layout.cshtml *@
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Inventory Management</title>

    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- DataTables -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        @if (User.Identity?.IsAuthenticated ?? false)
        {
            <partial name="_Sidebar" />
        }

        <!-- Page Content -->
        <div id="page-content-wrapper" class="@(User.Identity?.IsAuthenticated ?? false ? "" : "w-100")">
            <!-- Top Navigation -->
            <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm">
                <div class="container-fluid">
                    @if (User.Identity?.IsAuthenticated ?? false)
                    {
                        <button class="btn btn-primary" id="menu-toggle">
                            <i class="fas fa-bars"></i>
                        </button>
                    }

                    <a class="navbar-brand ms-3" href="/">
                        <i class="fas fa-warehouse text-primary"></i> Inventory Management
                    </a>

                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                            data-bs-target="#navbarSupportedContent">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav ms-auto mt-2 mt-lg-0">
                            @if (User.Identity?.IsAuthenticated ?? false)
                            {
                                <!-- Notification Bell -->
                                <li class="nav-item dropdown">
                                    <a class="nav-link position-relative" href="#" id="notificationIcon"
                                       data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-bell"></i>
                                        <span id="notificationBadge" class="notification-badge" style="display:none;">0</span>
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-end notification-dropdown"
                                         id="notificationDropdown">
                                        <div class="dropdown-header d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Notifications</h6>
                                            <a href="/Notifications" class="text-decoration-none small text-primary">View All</a>
                                        </div>
                                        <div id="notificationList" class="notification-list">
                                            <div class="text-center py-3">
                                                <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="dropdown-footer">
                                            <a href="#" id="markAllAsRead">Mark all as read</a>
                                        </div>
                                    </div>
                                </li>

                                <!-- User Dropdown (NO USER ICON - JUST TEXT) -->
                                <li class="nav-item dropdown ms-3">
                                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown"
                                       role="button" data-bs-toggle="dropdown">
                                        @User.Identity.Name
                                    </a>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li>
                                            <a class="dropdown-item" href="/Account/Profile">
                                                <i class="fas fa-user"></i> Profile
                                            </a>
                                        </li>
                                        @if (User.IsInRole("Admin"))
                                        {
                                            <li>
                                                <a class="dropdown-item" href="/Approvals">
                                                    <i class="fas fa-check-circle"></i> Approvals
                                                    <span class="badge bg-warning ms-2" id="pendingApprovalsCount"></span>
                                                </a>
                                            </li>
                                        }
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <form asp-controller="Account" asp-action="Logout" method="post">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="dropdown-item">
                                                    <i class="fas fa-sign-out-alt"></i> Logout
                                                </button>
                                            </form>
                                        </li>
                                    </ul>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </nav>

            <!-- Page Content -->
            <div class="container-fluid px-4">
                @if (TempData["Info"] != null)
                {
                    <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-info-circle"></i> @TempData["Info"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                @if (TempData["Success"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-check-circle"></i> @TempData["Success"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                @if (TempData["Error"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-exclamation-circle"></i> @TempData["Error"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }

                @RenderBody()
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    </div>

    <!-- Global Image Modal -->
    <div class="modal fade" id="globalImageModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Image Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="globalModalImage" class="img-fluid" alt="Preview">
                </div>
            </div>
        </div>
    </div>

    <input type="hidden" id="jwtToken" value="@Context.Session.GetString("JwtToken")" />

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/errorHandler.js" asp-append-version="true"></script>
    <script src="~/js/ajaxFormHandler.js" asp-append-version="true"></script>

    <script>
        // Global notification variables
        let notificationConnection = null;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;

        $(document).ready(function() {
            // Sidebar toggle
            $('#menu-toggle').click(function(e) {
                e.preventDefault();
                $('#wrapper').toggleClass('toggled');
            });

            // Only initialize notifications if user is authenticated
            if ($('#jwtToken').val()) {
                initializeNotifications();
                setupNotificationHandlers();
                loadNotificationCount();
                loadRecentNotifications();

                // Check for pending approvals if admin
                @if (User.IsInRole("Admin"))
                {
                        <text>loadPendingApprovalsCount();</text>
                }
            }
        });

        function initializeNotifications() {
            const token = $('#jwtToken').val();
            if (!token) {
                console.error('No JWT token available');
                return;
            }

            console.log('Initializing SignalR connection...');

            // Connect directly to NotificationService bypassing API Gateway for WebSocket
            notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5005/notificationHub", {
                    accessTokenFactory: () => token,
                    transport: signalR.HttpTransportType.WebSockets |
                              signalR.HttpTransportType.ServerSentEvents |
                              signalR.HttpTransportType.LongPolling
                })
                .withAutomaticReconnect({
                    nextRetryDelayInMilliseconds: retryContext => {
                        if (retryContext.previousRetryCount >= maxReconnectAttempts) {
                            return null; // Stop reconnecting
                        }
                        return Math.min(retryContext.previousRetryCount * 2000, 30000);
                    }
                })
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Handle connection events
            notificationConnection.onreconnecting((error) => {
                console.warn('SignalR reconnecting...', error);
            });

            notificationConnection.onreconnected((connectionId) => {
                console.log('SignalR reconnected:', connectionId);
                reconnectAttempts = 0;
                loadNotificationCount(); // Refresh count after reconnection
            });

            notificationConnection.onclose((error) => {
                console.error('SignalR connection closed:', error);

                // Try manual reconnection after delay
                if (reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    setTimeout(() => {
                        console.log(`Attempting manual reconnection (${reconnectAttempts}/${maxReconnectAttempts})...`);
                        startConnection();
                    }, 5000 * reconnectAttempts);
                }
            });

            // Handle incoming notifications
            notificationConnection.on("ReceiveNotification", function(notification) {
                console.log('Notification received:', notification);

                // Show toast notification
                showToast(`${notification.title}: ${notification.message}`, getNotificationType(notification.type));

                // Update notification count
                incrementNotificationCount();

                // Refresh notification dropdown if open
                if ($('#notificationDropdown').hasClass('show')) {
                    loadRecentNotifications();
                }

                // Play notification sound (optional)
                // playNotificationSound();

                // If admin and approval request, update pending count
                @if (User.IsInRole("Admin"))
                {
                        <text>
                        if (notification.type === 'ApprovalRequest') {
                            loadPendingApprovalsCount()
                        }
                        </text>
                }
            });

            // Handle connection confirmation
            notificationConnection.on("Connected", function(data) {
                console.log('Connection confirmed:', data);
            });

            // Start the connection
            startConnection();
        }

        function startConnection() {
            if (notificationConnection) {
                notificationConnection.start()
                    .then(() => {
                        console.log('SignalR connected successfully');
                        reconnectAttempts = 0;
                    })
                    .catch(err => {
                        console.error('SignalR connection error:', err);
                    });
            }
        }

        function setupNotificationHandlers() {
            // Notification bell click handler
            $('#notificationIcon').on('click', function(e) {
                e.preventDefault();
                loadRecentNotifications();
            });

            // Mark all as read handler
            $('#markAllAsRead').on('click', function(e) {
                e.preventDefault();
                markAllAsRead();
            });
        }

        function loadNotificationCount() {
            $.ajax({
                url: '/Notifications/GetUnreadCount',
                type: 'GET',
                success: function(count) {
                    updateNotificationBadge(count);
                },
                error: function(xhr, status, error) {
                    console.error('Failed to load notification count:', error);
                }
            });
        }

        function loadRecentNotifications() {
            $('#notificationList').html(`
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `);

            $.ajax({
                url: '/Notifications/GetRecentNotifications',
                type: 'GET',
                success: function(notifications) {
                    renderNotifications(notifications);
                },
                error: function(xhr, status, error) {
                    console.error('Failed to load notifications:', error);
                    $('#notificationList').html(`
                        <div class="notification-empty">
                            <i class="fas fa-exclamation-circle"></i>
                            <p class="mb-0">Failed to load notifications</p>
                        </div>
                    `);
                }
            });
        }

        function renderNotifications(notifications) {
            let html = '';

            if (!notifications || notifications.length === 0) {
                html = `
                    <div class="notification-empty">
                        <i class="fas fa-bell-slash"></i>
                        <p class="mb-0">No new notifications</p>
                    </div>
                `;
            } else {
                notifications.forEach(function(notification) {
                    html += createNotificationItem(notification);
                });
            }

            $('#notificationList').html(html);
        }

        function createNotificationItem(notification) {
            const timeAgo = formatTimeAgo(notification.createdAt);
            const unreadClass = notification.isRead ? '' : 'unread';
            const icon = getNotificationIcon(notification.type);
            const iconColor = getNotificationIconColor(notification.type);

            return `
                <div class="notification-item ${unreadClass}" data-id="${notification.id}" onclick="markAsRead(${notification.id})">
                    <div class="d-flex align-items-start">
                        <div class="notification-icon ${iconColor} me-3">
                            <i class="${icon} text-white"></i>
                        </div>
                        <div class="notification-content">
                            <h6>${escapeHtml(notification.title)}</h6>
                            <p>${escapeHtml(notification.message)}</p>
                            <div class="notification-time">
                                <i class="fas fa-clock me-1"></i>
                                ${timeAgo}
                                ${!notification.isRead ? '<span class="notification-dot ms-2"></span>' : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function markAsRead(notificationId) {
            $.ajax({
                url: '/Notifications/MarkAsRead',
                type: 'POST',
                data: { notificationId: notificationId },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function() {
                    $(`.notification-item[data-id="${notificationId}"]`).removeClass('unread');
                    loadNotificationCount();
                },
                error: function(xhr, status, error) {
                    console.error('Failed to mark notification as read:', error);
                }
            });
        }

        function markAllAsRead() {
            $.ajax({
                url: '/Notifications/MarkAllAsRead',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function() {
                    $('.notification-item').removeClass('unread');
                    $('.notification-dot').remove();
                    updateNotificationBadge(0);
                    showToast('All notifications marked as read', 'success');
                },
                error: function(xhr, status, error) {
                    console.error('Failed to mark all as read:', error);
                    showToast('Failed to mark notifications as read', 'error');
                }
            });
        }

        function updateNotificationBadge(count) {
            const $badge = $('#notificationBadge');
            count = parseInt(count) || 0;

            if (count > 0) {
                $badge.text(count > 99 ? '99+' : count).show();
            } else {
                $badge.hide();
            }
        }

        function incrementNotificationCount() {
            const $badge = $('#notificationBadge');
            const current = parseInt($badge.text()) || 0;
            updateNotificationBadge(current + 1);
        }

        function decrementNotificationCount() {
            const $badge = $('#notificationBadge');
            const current = parseInt($badge.text()) || 0;
            if (current > 0) {
                updateNotificationBadge(current - 1);
            }
        }

        @if (User.IsInRole("Admin"))
        {
                <text>
                function loadPendingApprovalsCount() {
                    $.ajax({
                        url: 'http://localhost:5000/api/approvalrequests?pageNumber=1&pageSize=1',
                        type: 'GET',
                        headers: {
                            'Authorization': 'Bearer ' + $('#jwtToken').val()
                        },
                        success: function(data) {
                            const count = data.totalCount || 0;
                            updatePendingApprovalsCount(count);
                        },
                        error: function(xhr, status, error) {
                            console.error('Failed to load pending approvals count:', error);
                        }
                    });
                }

                function updatePendingApprovalsCount(count) {
                    const $badge = $('#pendingApprovalsCount');
                    if (count > 0) {
                        $badge.text(count).show();
                    } else {
                        $badge.hide();
                    }

                    // Also update sidebar badge if exists
                    const $sidebarBadge = $('#sidebarPendingCount');
                    if ($sidebarBadge.length) {
                        if (count > 0) {
                            $sidebarBadge.text(count).show();
                        } else {
                            $sidebarBadge.hide();
                        }
                    }
                }
                </text>
        }

        // Helper functions
        function formatTimeAgo(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffMs = now - date;
            const diffSecs = Math.floor(diffMs / 1000);
            const diffMins = Math.floor(diffSecs / 60);
            const diffHours = Math.floor(diffMins / 60);
            const diffDays = Math.floor(diffHours / 24);

            if (diffSecs < 60) return 'just now';
            if (diffMins < 60) return `${diffMins}m ago`;
            if (diffHours < 24) return `${diffHours}h ago`;
            if (diffDays < 30) return `${diffDays}d ago`;

            return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
            });
        }

        function getNotificationIcon(type) {
            const icons = {
                'ApprovalRequest': 'fas fa-clock',
                'ApprovalResponse': 'fas fa-check-circle',
                'ProductUpdate': 'fas fa-box',
                'RouteUpdate': 'fas fa-route',
                'System': 'fas fa-info-circle'
            };
            return icons[type] || 'fas fa-bell';
        }

        function getNotificationType(type) {
            const types = {
                'ApprovalRequest': 'warning',
                'ApprovalResponse': 'success',
                'ProductUpdate': 'info',
                'RouteUpdate': 'info',
                'System': 'secondary'
            };
            return types[type] || 'info';
        }

        function getNotificationIconColor(type) {
            const colors = {
                'ApprovalRequest': 'bg-warning',
                'ApprovalResponse': 'bg-success',
                'ProductUpdate': 'bg-info',
                'RouteUpdate': 'bg-primary',
                'System': 'bg-secondary'
            };
            return colors[type] || 'bg-primary';
        }

        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, m => map[m]);
        }

        // Global toast function
        window.showToast = function(message, type = 'info') {
            const toastHtml = `
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            const $container = $('#toastContainer');
            if ($container.length === 0) {
                $('body').append('<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;"></div>');
            }

            $('#toastContainer').append(toastHtml);

            const toastElement = $('#toastContainer .toast').last()[0];
            const toast = new bootstrap.Toast(toastElement, {
                delay: 5000
            });
            toast.show();

            $(toastElement).on('hidden.bs.toast', function() {
                $(this).remove();
            });
        };
        
        function showImageModal(imageUrl, title) {
            $('#globalModalImage').attr('src', imageUrl);
            $('#globalImageModal .modal-title').text(title || 'Image Preview');
            $('#globalImageModal').modal('show');
        }
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>