<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Inventory Management</title>

    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- DataTables -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        @if (User.Identity?.IsAuthenticated ?? false)
        {
            <partial name="_Sidebar" />
        }

        <!-- Page Content -->
        <div id="page-content-wrapper" class="@(User.Identity?.IsAuthenticated ?? false ? "" : "w-100")">
            <!-- Top Navigation -->
            <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm">
                <div class="container-fluid">
                    @if (User.Identity?.IsAuthenticated ?? false)
                    {
                        <button class="btn btn-primary" id="menu-toggle">
                            <i class="fas fa-bars"></i>
                        </button>
                    }

                    <a class="navbar-brand ms-3" href="/">
                        <i class="fas fa-warehouse text-primary"></i> Inventory Management
                    </a>

                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                            data-bs-target="#navbarSupportedContent">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav ms-auto mt-2 mt-lg-0">
                            @if (User.Identity?.IsAuthenticated ?? false)
                            {
                                <!-- Notification Bell -->
                                <li class="nav-item dropdown">
                                    <a class="nav-link position-relative" href="#" id="notificationIcon"
                                       data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-bell"></i>
                                        <span id="notificationBadge" class="notification-badge" style="display:none;">0</span>
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-end notification-dropdown"
                                         id="notificationDropdown" aria-labelledby="notificationIcon">
                                        <div class="dropdown-header d-flex justify-content-between align-items-center">
                                            <span>Notifications</span>
                                            <a href="/Notifications" class="text-decoration-none small">View All</a>
                                        </div>
                                        <div class="dropdown-divider"></div>
                                        <div id="notificationList" class="notification-list">
                                            <div class="text-center py-3">
                                                <div class="spinner-border spinner-border-sm" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>

                                <!-- User Dropdown -->
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown"
                                       role="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-user-circle"></i> @User.Identity.Name
                                    </a>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li>
                                            <a class="dropdown-item" href="/Account/Profile">
                                                <i class="fas fa-user"></i> Profile
                                            </a>
                                        </li>
                                        @if (User.IsInRole("Admin"))
                                        {
                                            <li>
                                                <a class="dropdown-item" href="/Approvals">
                                                    <i class="fas fa-check-circle"></i> Approvals
                                                    <span class="badge bg-warning ms-2" id="pendingApprovalsCount"></span>
                                                </a>
                                            </li>
                                        }
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <form asp-controller="Account" asp-action="Logout" method="post">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="dropdown-item">
                                                    <i class="fas fa-sign-out-alt"></i> Logout
                                                </button>
                                            </form>
                                        </li>
                                    </ul>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </nav>

            <!-- Page Content -->
            <div class="container-fluid px-4">
                @if (TempData["Success"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-check-circle"></i> @TempData["Success"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                @if (TempData["Error"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        <i class="fas fa-exclamation-circle"></i> @TempData["Error"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }

                @RenderBody()
            </div>
        </div>
    </div>
    <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    </div>
    <input type="hidden" id="jwtToken" value="@Context.Session.GetString("JwtToken")" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <!-- Other scripts AFTER jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>

    <!-- Your custom scripts -->
    <script src="~/js/site.js" asp-append-version="true"></script>

    <!-- Wrap notifications.js in document-ready -->
    <script>
        $(document).ready(function() {
                    let notificationConnection = null;
        let notificationTimeout = null;

        $(document).ready(function () {
            initializeNotifications();
            setupNotificationHandlers();
            loadNotificationCount();
        });

        function setupNotificationHandlers() {
            // Notification dropdown handler
            $('#notificationIcon').on('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                clearTimeout(notificationTimeout);
                loadRecentNotifications();
            });

            // Close dropdown when clicking outside
            $(document).on('click', function (e) {
                if (!$(e.target).closest('.notification-dropdown').length) {
                    notificationTimeout = setTimeout(() => {
                        $('#notificationDropdown').removeClass('show');
                    }, 200);
                }
            });
        }

        function initializeNotifications() {
            const token = $('#jwtToken').val();
            if (!token) return;

            notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5000/notificationHub", {
                    accessTokenFactory: () => token,
                    transport: signalR.HttpTransportType.WebSockets
                })
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Warning)
                .build();

            notificationConnection.on("ReceiveNotification", (notification) => {
                console.log('Notification received:', notification);
                showToast(`${notification.title}: ${notification.message}`, 'info');
                incrementNotificationCount();
            });

            notificationConnection.start()
                .then(() => console.log('SignalR connected'))
                .catch(err => console.error('SignalR connection error:', err));
        }

        function loadNotificationCount() {
            $.get('/Notifications/GetUnreadCount')
                .done(count => updateNotificationBadge(count))
                .fail(err => console.error('Notification count error:', err));
        }

        function loadRecentNotifications() {
            const $list = $('#notificationList');
            $list.html('<div class="text-center py-3"><div class="spinner-border spinner-border-sm"></div></div>');

            $.get('/Notifications/GetRecentNotifications')
                .done(notifications => renderNotifications(notifications))
                .fail(() => {
                    $list.html('<div class="text-center py-3 text-danger">Error loading notifications</div>');
                });
        }

        function renderNotifications(notifications) {
            const $list = $('#notificationList');
            $list.empty();

            if (!notifications || notifications.length === 0) {
                $list.html('<div class="text-center py-3 text-muted">No notifications</div>');
                return;
            }

            notifications.forEach(notification => {
                $list.append(createNotificationItem(notification));
            });
        }

        function createNotificationItem(notification) {
            const timeAgo = formatDate(notification.createdAt);
            const unreadClass = notification.isRead ? '' : 'unread';

            return $(`
                <a href="#" class="dropdown-item notification-item ${unreadClass}"
                   data-id="${notification.id}">
                    <div class="d-flex">
                        <div class="flex-grow-1">
                            <h6 class="mb-1">${notification.title}</h6>
                            <p class="mb-0 small">${notification.message}</p>
                            <small class="text-muted">${timeAgo}</small>
                        </div>
                    </div>
                </a>
            `).click(function (e) {
                e.preventDefault();
                markAsRead(notification.id, $(this));
            });
        }

        function markAsRead(notificationId, $element) {
            $.post('/Notifications/MarkAsRead', { notificationId })
                .done(() => {
                    $element.removeClass('unread');
                    loadNotificationCount();
                });
        }

        function updateNotificationBadge(count) {
            const $badge = $('#notificationBadge');
            count = parseInt(count) || 0;

            if (count > 0) {
                $badge.text(count > 9 ? '9+' : count).show();
            } else {
                $badge.hide();
            }
        }

        function incrementNotificationCount() {
            const $badge = $('#notificationBadge');
            const current = parseInt($badge.text()) || 0;
            updateNotificationBadge(current + 1);
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffMs = now - date;
            const diffSecs = Math.floor(diffMs / 1000);

            if (diffSecs < 60) return 'just now';
            if (diffSecs < 3600) return `${Math.floor(diffSecs / 60)}m ago`;
            if (diffSecs < 86400) return `${Math.floor(diffSecs / 3600)}h ago`;

            return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric'
            });
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `);

            $('#toastContainer').append(toast);
            new bootstrap.Toast(toast[0]).show();

            setTimeout(() => toast.remove(), 5000);
        }
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>