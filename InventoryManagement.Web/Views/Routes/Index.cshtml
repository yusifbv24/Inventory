@model PagedResultDto<RouteViewModel>
@{
    ViewData["Title"] = "Routes";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Inventory Routes</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item active">Routes</li>
    </ol>

    <div class="card mb-4 shadow">
        <div class="card-header">
            <div class="row g-3">
                <div class="col md-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="searchInput" class="form-control"
                               placeholder="Search by code, model, vendor..." />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                        <input type="text" id="dateRange" class="form-control"
                               placeholder="Select date range" />
                    </div>
                </div>
                <div class="col-md-2">
                    <select id="statusFilter" class="form-select">
                        @{
                            var falseSelection = ViewBag.CurrentFilter == false ? "selected" : "";
                            var trueSelection = ViewBag.CurrentFilter == true ? "selected" : "";
                        }
                        <option value="">All Status</option>
                        <option value="false" falseSelection>Pending</option>
                        <option value="true" trueSelection>Completed</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary w-100" onclick="applyFilters()">
                        <i class="fas fa-filter"></i> Apply
                    </button>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-outline-secondary w-100" onclick="resetFilters()">
                        <i class="fas fa-redo"></i> Reset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4 shadow">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <partial name="_GmailPagination" model="Model" />
                </div>
                <div class="col-auto">
                    @if (User.HasPermission("route.create") || User.HasPermission("route.create.direct"))
                    {
                        <a asp-action="Transfer" class="btn btn-primary btn-sm">
                            <i class="fas fa-exchange-alt"></i> New Transfer
                        </a>
                    }
                    <button class="btn btn-outline-secondary btn-sm" onclick="exportData()">
                        <i class="fas fa-file-pdf"></i> Export PDF
                    </button>
                    <div class="btn-group btn-group-sm" role="group">
                        <a asp-action="Index" asp-route-isCompleted="" class="btn btn-outline-secondary @(ViewBag.CurrentFilter == null ? "active" : "")">
                            All
                        </a>
                        <a asp-action="Index" asp-route-isCompleted="false" class="btn btn-outline-warning @(ViewBag.CurrentFilter == false ? "active" : "")">
                            Pending
                        </a>
                        <a asp-action="Index" asp-route-isCompleted="true" class="btn btn-outline-success @(ViewBag.CurrentFilter == true ? "active" : "")">
                            Completed
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                @if (Model.Items.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="routesTable">
                            <thead>
                                <tr>
                                    <th style="width: 80px;">Image</th>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Product</th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Status</th>
                                    <th class="actions-column">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="routesTableBody">
                                @foreach (var route in Model.Items)
                                {
                                    <tr data-search="@($"{route.InventoryCode} {route.Model} {route.Vendor} {route.FromDepartmentName} {route.ToDepartmentName}".ToLower())">
                                        <td class="text-center">
                                            @if (!string.IsNullOrEmpty(route.ImageUrl))
                                            {
                                                <img src="@($"http://localhost:5000{route.ImageUrl}")"
                                                     class="img-thumbnail route-image"
                                                     style="width: 60px; height: 60px; object-fit: cover; cursor: pointer;"
                                                     onclick="showImageModal('@($"http://localhost:5000{route.ImageUrl}")', 'Route @route.Id')"
                                                     alt="Route Image">
                                            }
                                            else
                                            {
                                                <div class="no-image-placeholder">
                                                    <i class="fas fa-image text-muted"></i>
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            <small>
                                                @route.CreatedAt.ToString("MM/dd/yyyy")<br />
                                                @route.CreatedAt.ToString("HH:mm")
                                            </small>
                                        </td>
                                        <td>
                                            @{
                                                var typeColor = route.RouteTypeName switch
                                                {
                                                    "New" => "bg-success",
                                                    "Existing" => "bg-primary",
                                                    "Transfer" => "bg-info",
                                                    "Update" => "bg-warning",
                                                    "Removal" => "bg-danger",
                                                    _ => "bg-secondary"
                                                };
                                            }
                                            <span class="badge @typeColor">@route.RouteTypeName</span>
                                        </td>
                                        <td>
                                            <a asp-controller="Products" asp-action="Details" asp-route-id="@route.ProductId"
                                               class="text-decoration-none">
                                                <span class="badge bg-primary">@route.InventoryCode</span>
                                                @route.Vendor
                                            </a>
                                            <br />
                                            <small class="text-muted">@route.Model</small>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(route.FromDepartmentName))
                                            {
                                                <div>@route.FromDepartmentName</div>
                                            }
                                            @if (!string.IsNullOrEmpty(route.FromWorker))
                                            {
                                                <small class="text-muted">
                                                    <i class="fas fa-user"></i> @(route.FromWorker)
                                                </small>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(route.ToDepartmentName))
                                            {
                                                <div>@route.ToDepartmentName</div>
                                            }
                                            @if (!string.IsNullOrEmpty(route.ToWorker))
                                            {
                                                <small class="text-muted">
                                                    <i class="fas fa-user"></i> @(route.ToWorker)
                                                </small>
                                            }
                                        </td>
                                        <td>
                                            @if (route.IsCompleted)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="fas fa-check-circle"></i> Completed
                                                </span>
                                                @if (route.CompletedAt.HasValue)
                                                {
                                                    <br />
                                                    <small class="text-muted">@route.CompletedAt.Value.ToString("MM/dd HH:mm")</small>
                                                }
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">
                                                    <i class="fas fa-clock"></i> Pending Transfer
                                                </span>
                                                <br />
                                                <small class="text-muted">
                                                    Created: @route.CreatedAt.ToString("MM/dd HH:mm")
                                                </small>
                                            }
                                        </td>
                                        <td class="actions-column">
                                            <div class="btn-group" role="group">
                                                <a asp-action="Details" asp-route-id="@route.Id"
                                                   class="btn btn-sm btn-outline-info" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                @if ((User.HasPermission("route.update") || User.HasPermission("route.update.direct")) && !route.IsCompleted)
                                                {
                                                    <a asp-action="Edit" asp-route-id="@route.Id"
                                                       class="btn btn-sm btn-outline-warning" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                }

                                                @if (!route.IsCompleted)
                                                {
                                                    <button type="button" class="btn btn-sm btn-success"
                                                            onclick="completeRoute(@route.Id)" title="Complete">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }

                                                @if (User.HasPermission("route.delete") && !route.IsCompleted)
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                                            onclick="deleteRoute(@route.Id)" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }

                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-route fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No routes found</p>
                        <a asp-action="Transfer" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Create First Route
                        </a>
                    </div>
                }
            </div>
            <div class="card-footer">
                <partial name="_GmailPagination" model="Model" />
            </div>

        </div>
    </div>

    <!-- Image Modal -->
    <div class="modal fade" id="imageModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imageModalTitle">Route Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="modalImage" class="img-fluid" alt="Route Image">
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden form for CSRF token -->
    <form id="csrfForm" style="display: none;">
        @Html.AntiForgeryToken()
    </form>

</div>

@section Scripts {
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
            <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
            <script src="~/js/pdf-export.js"></script>
            <script>
        $(document).ready(function() {
                    // Initialize date range picker
                    $('#dateRange').daterangepicker({
                        autoUpdateInput: false,
                        locale: {
                            cancelLabel: 'Clear',
                            format: 'MM/DD/YYYY'
                        }
                    });

                    $('#dateRange').on('apply.daterangepicker', function(ev, picker) {
                        $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));
                    });

                    $('#dateRange').on('cancel.daterangepicker', function() {
                        $(this).val('');
                    });

                    // Real-time search
                    $('#searchInput').on('input', function() {
                        filterTable();
                    });

                    // Select all checkbox
                    $('#selectAll').on('change', function() {
                        $('.route-checkbox').prop('checked', $(this).prop('checked'));
                    });
                });

        function filterTable() 
        {
            const searchTerm = $('#searchInput').val().toLowerCase();
                        $('#routesTableBody tr').each(function() {
                            const searchData = $(this).data('search');
                            $(this).toggle(searchData.includes(searchTerm));
                        });
        }

         function applyFilters() {
            const params = new URLSearchParams();

            const search = $('#searchInput').val();
            if (search) params.append('search', search);

            const dateRange = $('#dateRange').val();
            if (dateRange) {
                const dates = dateRange.split(' - ');
                if (dates.length === 2) {
                    // Parse dates and format them properly for the backend
                    const startDate = moment(dates[0], 'MM/DD/YYYY').format('YYYY-MM-DD');
                    const endDate = moment(dates[1], 'MM/DD/YYYY').format('YYYY-MM-DD');

                    params.append('startDate', startDate);
                    params.append('endDate', endDate);
                }
            }

            const status = $('#statusFilter').val();
            if (status !== '') {
                params.append('isCompleted', status);
            }

            // Preserve current page size
            params.append('pageSize', '@Model.PageSize');
            params.append('pageNumber', '1'); // Reset to first page

            // Navigate to the filtered URL
            window.location.href = '/Routes' + (params.toString() ? '?' + params.toString() : '');
        }

        function formatLocalDateTime(utcDateString) {
            const date = new Date(utcDateString);
            return date.toLocaleString('en-US', {
                timeZone: 'Asia/Baku', // Azerbaijan timezone
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function resetFilters() {
                    $('#searchInput').val('');
                    $('#dateRange').val('');
                    $('#statusFilter').val('');
                    window.location.href = '/Routes';
                }
        function changePage(page) {
            const params = new URLSearchParams(window.location.search);
            params.set('pageNumber', page);
            window.location.href = '/Routes?' + params.toString();
        }

        function exportData()
        {
             exportRoutesToPDF();
        }

        function showImageModal(imageUrl, title) {
                    $('#modalImage').attr('src', imageUrl);
                    $('#imageModalTitle').text(title);
                    $('#imageModal').modal('show');
        }

        function completeRoute(id) {
            if (confirm('Are you sure you want to mark this route as completed?')) {
                $.ajax({
                    url: '/Routes/Complete/' + id,
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('#csrfForm input[name="__RequestVerificationToken"]').value
                    },
                    success: function(response) {
                        // Reload after a short delay
                        setTimeout(function() {
                            window.location.reload();
                        }, 1500);
                    },
                    error: function(xhr) {
                        const errorMsg = ErrorHandler.parseErrorMessage(xhr, 'Failed to complete route');
                        showToast(errorMsg, 'error');
                    }
                });
            }
        }
        function deleteRoute(id) {
                    if (confirm('Are you sure you want to delete this route?')) {
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/Routes/Delete/' + id;

                        const token = document.querySelector('#csrfForm input[name="__RequestVerificationToken"]').value;
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = '__RequestVerificationToken';
                        tokenInput.value = token;

                        form.appendChild(tokenInput);
                        document.body.appendChild(form);
                        form.submit();
                    }
                }
    </script>
    <style>
        .route-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            cursor: pointer;
            border-radius: 4px;
        }

        .no-image-placeholder {
            width: 60px;
            height: 60px;
            background-color: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }

        .gmail-pagination {
            font-size: 0.875rem;
        }

        .pagination-controls .btn {
            padding: 0.25rem 0.5rem;
            margin: 0 0.125rem;
        }
        #routesTable{
            font-weight:normal;
        }
    
        #routesTable tbody tr {
            font-weight: normal; /* Ensure body rows are normal weight */
        }
    
        /* Additional styles matching products view */
        #routesTable tbody td {
            vertical-align: middle;
            font-weight: 400;
        }
    </style>
}