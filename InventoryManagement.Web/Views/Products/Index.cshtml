@model List<ProductViewModel>
@{
    ViewData["Title"] = "Products";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Products</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item active">Products</li>
    </ol>

    <div class="card mb-4 shadow">
        <div class="card-header">
            <div class="row">
                <div class="col">
                    <i class="fas fa-boxes me-1"></i>
                    Product Inventory
                </div>
                <div class="col text-end">
                    <button class="btn btn-sm btn-outline-secondary" onclick="exportProductsToPDF()">
                        <i class="fas fa-file-pdf"></i> Export PDF
                    </button>
                    @if (User.HasPermission("product.create")||User.HasPermission("product.create.direct"))
                    {
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Add Product
                        </a>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle" id="productsTable">
                        <thead>
                            <tr>
                                <th style="width: 80px;">Image</th>
                                <th>Code</th>
                                <th>Product Details</th>
                                <th>Location</th>
                                <th>Status</th>
                                <th style="width: 120px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Model)
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                                        {
                                            <img src="@product.FullImageUrl" class="img-thumbnail"
                                                 style="width: 60px; height: 60px; object-fit: cover; cursor: pointer;"
                                                 onclick="showImageModal('@product.FullImageUrl','@product.CategoryName')"
                                                 alt="@product.CategoryName">
                                        }
                                        else
                                        {
                                            <div class="bg-light rounded d-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                                                <i class="fas fa-image text-muted"></i>
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-primary fs-6 inventory-code-display" data-id="@product.Id">
                                            @product.InventoryCode
                                        </span>
                                        <div class="inventory-code-edit d-none" data-id="@product.Id">
                                            <div class="input-group input-group-sm">
                                                <input type="number" class="form-control form-control-sm inventory-code-input"
                                                       value="@product.InventoryCode" min="1" max="9999" data-id="@product.Id">
                                                <button class="btn btn-success btn-sm save-inventory-code" data-id="@product.Id">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="btn btn-secondary btn-sm cancel-inventory-code" data-id="@product.Id">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <strong>@product.Model</strong>
                                            <small class="text-muted">by @product.Vendor</small>
                                        </div>
                                        <small class="text-muted">
                                            <i class="fas fa-tag"></i> @product.CategoryName
                                        </small>
                                    </td>
                                    <td>
                                        <div>
                                            <i class="fas fa-building"></i> @product.DepartmentName
                                        </div>
                                        @if (!string.IsNullOrEmpty(product.Worker))
                                        {
                                            <small class="text-muted">
                                                <i class="fas fa-user"></i> @product.Worker
                                            </small>
                                        }
                                    </td>
                                    <td>
                                        <div class="d-flex gap-1 flex-wrap">
                                            @if (product.IsWorking)
                                            {
                                                <span class="badge bg-success">Working</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Not Working</span>
                                            }
                                            @if (product.IsNewItem)
                                            {
                                                <span class="badge bg-info">New</span>
                                            }
                                            @if (!product.IsActive)
                                            {
                                                <span class="badge bg-secondary">Inactive</span>
                                            }
                                            @if (product.HasPendingApproval)
                                            {
                                                <span class="badge bg-warning">
                                                    <i class="fas fa-clock"></i> Pending Approval
                                                </span>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@product.Id" class="btn btn-sm btn-outline-info" title="View">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@product.Id" class="btn btn-sm btn-outline-warning" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteProduct(@product.Id)" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                    <p class="text-muted">No products found in inventory</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Add First Product
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this product?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/pdf-export.js"></script>
    <script>
        $(document).ready(function() {
            $('#productsTable').DataTable({
                pageLength: 100, // Show more items per page for large datasets
                lengthMenu: [[50, 100, 250, 500, -1], [50, 100, 250, 500, "All"]],
                responsive: true,
                ordering:false,
                deferRender: true, // Improve performance
                stateSave: true, // Remember user's preferences
                language: {
                    search: "Search:",
                    lengthMenu: "Show _MENU_ products",
                    info: "Showing _START_ to _END_ of _TOTAL_ products",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                }
            });
        });

        function deleteProduct(id) {
            $('#deleteForm').attr('action', '/Products/Delete/' + id);
            $('#deleteModal').modal('show');
        }
    </script>
    <script>
        $(document).ready(function() {
            // Double-click to edit inventory code
            $('.inventory-code-display').on('dblclick', function() {
                const id = $(this).data('id');
                $(this).addClass('d-none');
                $(`.inventory-code-edit[data-id="${id}"]`).removeClass('d-none');
                $(`.inventory-code-input[data-id="${id}"]`).focus().select();
            });

            // Save inventory code
            $('.save-inventory-code').on('click', function() {
                const id = $(this).data('id');
                const newCode = $(`.inventory-code-input[data-id="${id}"]`).val();

                if (newCode < 1 || newCode > 9999) {
                    showToast('Inventory code must be between 1 and 9999', 'error');
                    return;
                }

                // Show loading state
                const $btn = $(this);
                const originalHtml = $btn.html();
                $btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span>');


                // Call API to update only inventory code
            $.ajax({
                url: `/Products/UpdateInventoryCode`,
                type: 'POST',
                data: JSON.stringify({
                    id: id,
                    inventoryCode: parseInt(newCode)
                }),
                contentType: 'application/json',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                    'X-Requested-With': 'XMLHttpRequest'
                },
                skipGlobalError: true, // Add this to skip global error handler
                success: function() {
                    $(`.inventory-code-display[data-id="${id}"]`).text(newCode).removeClass('d-none');
                    $(`.inventory-code-edit[data-id="${id}"]`).addClass('d-none');
                    showToast('Inventory code updated successfully', 'success');
                },
                error: function(xhr) {
                    // Mark as handled to prevent global handler
                    xhr.errorHandled = true;
                    const errorMsg = ErrorHandler.parseErrorMessage(xhr, 'Failed to update inventory code');
                    showToast(errorMsg, 'error');
                },
                complete: function() {
                    $btn.prop('disabled', false).html(originalHtml);
                }
            });
        });

            // Cancel edit
            $('.cancel-inventory-code').on('click', function() {
                const id = $(this).data('id');
                $(`.inventory-code-display[data-id="${id}"]`).removeClass('d-none');
                $(`.inventory-code-edit[data-id="${id}"]`).addClass('d-none');
            });

            // Press Enter to save, Escape to cancel
            $('.inventory-code-input').on('keypress', function(e) {
                if (e.which === 13) { // Enter
                    const id = $(this).data('id');
                    $(`.save-inventory-code[data-id="${id}"]`).click();
                } else if (e.which === 27) { // Escape
                    const id = $(this).data('id');
                    $(`.cancel-inventory-code[data-id="${id}"]`).click();
                }
            });
        });

        function showImageModal(imageUrl, title) {
            $('#globalModalImage').attr('src', imageUrl);
            $('#globalImageModal .modal-title').text(title || 'Image Preview');
            $('#globalImageModal').modal('show');
        }

                        function exportProductsToPDF() {
            const table = document.getElementById('productsTable');
            if (!table) {
                showToast('Table not found', 'error');
                return;
            }

            // Clone the table to modify it
            const tableClone = table.cloneNode(true);

            // Find all headers to determine indices to remove
            const headers = tableClone.querySelectorAll('th');
            const indicesToRemove = [];
            const headersToKeep = ['Code', 'Product Details', 'Location', 'Status'];

            headers.forEach((header, index) => {
                const headerText = header.textContent.trim();
                // Keep only specified columns
                if (!headersToKeep.some(keep => headerText.includes(keep))) {
                    indicesToRemove.push(index);
                }
            });

            // Sort indices in descending order for safe removal
            indicesToRemove.sort((a, b) => b - a);

            // Remove headers
            indicesToRemove.forEach(index => {
                headers[index].remove();
            });

            // Remove corresponding cells in rows
            tableClone.querySelectorAll('tr').forEach(row => {
                const cells = row.querySelectorAll('td');
                indicesToRemove.forEach(index => {
                    if (cells[index]) cells[index].remove();
                });
            });

            exportToPDF(tableClone.outerHTML, 'products_export.pdf', 'Product Inventory Report');
        }
    </script>
}