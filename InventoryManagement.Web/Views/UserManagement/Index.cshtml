@model List<UserListViewModel>
@{
    ViewData["Title"] = "User Management";
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="mt-4">User Management</h1>
            <ol class="breadcrumb mb-4">
                <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
                <li class="breadcrumb-item active">User Management</li>
            </ol>
        </div>
        <div>
            <a href="@Url.Action("Create")" class="btn btn-primary">
                <i class="fas fa-user-plus"></i> Add New User
            </a>
        </div>
    </div>
    <div class="card shadow">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-users"></i> All Users (@Model.Count)
                    </h6>
                </div>
                <div class="col-auto">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" id="searchInput" placeholder="Search users...">
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="usersTable">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Email</th>
                            <th>Status</th>
                            <th>Roles</th>
                            <th>Created</th>
                            <th>Last Login</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-sm me-3">
                                            <span class="avatar-title rounded-circle bg-primary">
                                                @user.Username.Substring(0, 1).ToUpper()
                                            </span>
                                        </div>
                                        <div>
                                            <h6 class="mb-0">@user.FullName</h6>
                                            <small class="text-muted">@user.Username</small>
                                        </div>
                                    </div>
                                </td>
                                <td>@user.Email</td>
                                <td>
                                    @if (user.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td>
                                    @foreach (var role in user.Roles)
                                    {
                                        <span class="badge bg-primary me-1">@role</span>
                                    }
                                </td>
                                <td>
                                    <small>@(user.CreatedAt == default(DateTime) ? "Unknown" : user.CreatedAt.ToString("MMM dd, yyyy"))</small>
                                </td>
                                <td>
                                    @if (user.LastLoginAt.HasValue && user.LastLoginAt.Value != default(DateTime))
                                    {
                                        <small>@user.LastLoginAt.Value.ToString("MMM dd, yyyy HH:mm")</small>
                                    }
                                    else
                                    {
                                        <small class="text-muted">Never</small>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("Details", new { id = user.Id })"
                                           class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="@Url.Action("Edit", new { id = user.Id })"
                                           class="btn btn-sm btn-outline-primary" title="Edit User">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-warning"
                                                onclick="toggleUserStatus(@user.Id, @user.IsActive.ToString().ToLower())"
                                                title="Toggle Status">
                                            @if (user.IsActive)
                                            {
                                                <i class="fas fa-user-slash"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-user-check"></i>
                                            }
                                        </button>
                                        <a href="@Url.Action("ResetPassword", new { id = user.Id })"
                                           class="btn btn-sm btn-outline-secondary" title="Reset Password">
                                            <i class="fas fa-key"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                onclick="deleteUser(@user.Id, '@user.Username')"
                                                title="Delete User">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete user <strong id="deleteUsername"></strong>?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const tableRows = document.querySelectorAll('#usersTable tbody tr');

            tableRows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });

        // Toggle user status
            function toggleUserStatus(userId, isActive) {
            const action = isActive === 'true' ? 'deactivate' : 'activate';
            if (confirm(`Are you sure you want to ${action} this user?`)) {
                $.ajax({
                    url: '@Url.Action("QuickToggleStatus")',
                    type: 'POST',
                    data: { id: userId },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(data) {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('Error updating user status: ' + (data.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        alert('Error updating user status');
                    }
                });
            }
        }

        // Delete user
        function deleteUser(userId, username) {
            document.getElementById('deleteUsername').textContent = username;
            document.getElementById('deleteForm').action = '@Url.Action("Delete")/' + userId;

            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Auto-hide alerts
        setTimeout(() => {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
}