@model EditUserViewModel
@{
    ViewData["Title"] = "Edit User";
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="mt-4">Edit User</h1>
            <ol class="breadcrumb mb-4">
                <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index")">User Management</a></li>
                <li class="breadcrumb-item active">Edit User</li>
            </ol>
        </div>
        <div>
            <a href="@Url.Action("Index")" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Users
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow">
                <div class="card-header">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-user-edit"></i> User Information
                    </h6>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post">
                        @Html.AntiForgeryToken()
                        <input asp-for="Id" type="hidden" />
                        <input asp-for="Username" type="hidden" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Username</label>
                                    <input value="@Model.Username" class="form-control" readonly disabled />
                                    <div class="form-text">Username cannot be changed.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="Email" class="form-label">Email <span class="text-danger">*</span></label>
                                    <input asp-for="Email" class="form-control" placeholder="Enter email address" />
                                    <span asp-validation-for="Email" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="FirstName" class="form-label">First Name <span class="text-danger">*</span></label>
                                    <input asp-for="FirstName" class="form-control" placeholder="Enter first name" />
                                    <span asp-validation-for="FirstName" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="LastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                                    <input asp-for="LastName" class="form-control" placeholder="Enter last name" />
                                    <span asp-validation-for="LastName" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Status</label>
                                    <div class="form-check">
                                        <input asp-for="IsActive" class="form-check-input" type="checkbox" />
                                        <label asp-for="IsActive" class="form-check-label">
                                            Active User
                                        </label>
                                    </div>
                                    <div class="form-text">Inactive users cannot login to the system.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Roles</label>
                                    <div class="role-selection border rounded p-3">
                                        @{
                                            // Add a hidden field to ensure we always send role data
                                            <input type="hidden" name="RoleUpdateFlag" value="true" />
                                        }
                                        @foreach (var role in Model.AvailableRoles)
                                        {
                                            <div class="form-check mb-2">
                                                <input type="checkbox"
                                                       class="form-check-input role-checkbox"
                                                       name="SelectedRoles"
                                                       value="@role.Value"
                                                       id="role_@role.Value"
                                                       @(Model.CurrentRoles.Contains(role.Value) ? "checked" : "") />
                                                <label class="form-check-label" for="role_@role.Value">
                                                    @role.Text
                                                    @if (Model.CurrentRoles.Contains(role.Value))
                                                    {
                                                        <small class="text-muted">(Current)</small>
                                                    }
                                                </label>
                                            </div>
                                        }
                                        <!-- Hidden field to track original roles -->
                                        @foreach (var role in Model.CurrentRoles)
                                        {
                                            <input type="hidden" name="CurrentRoles" value="@role" />
                                        }
                                    </div>
                                    <div class="form-text">
                                        Select one or more roles for this user. Changes will be applied immediately upon save.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="@Url.Action("Index")" class="btn btn-secondary me-md-2">
                                <i class="fas fa-times"></i> Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Update User
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow">
                <div class="card-header">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-shield-alt"></i> User Permissions
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <input type="text" id="permissionSearch" class="form-control form-control-sm"
                               placeholder="Search permissions...">
                    </div>

                    <div id="permissionsContainer" style="max-height: 400px; overflow-y: auto;">
                        <div class="text-center">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>

                    <div class="mt-3">
                        <button type="button" class="btn btn-sm btn-success w-100" onclick="savePermissions()">
                            <i class="fas fa-save"></i> Save Permission Changes
                        </button>
                    </div>
                </div>
            </div>

            <div class="card shadow mt-4">
                <div class="card-header">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-lock"></i> Password Management
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-grid">
                        <a href="@Url.Action("ResetPassword", new { id = Model.Id })" class="btn btn-outline-warning">
                            <i class="fas fa-key"></i> Reset Password
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="jwtToken" value="@Context.Session.GetString("JwtToken")" />

@section Scripts {
    <script>
        let allPermissions = [];
        let originalPermissions = {};

        $(document).ready(function() {
            loadUserPermissionsStatus();
                let originalRoles = [];

            // Search functionality
            $('#permissionSearch').on('keyup', function() {
                const searchTerm = $(this).val().toLowerCase();
                filterPermissions(searchTerm);
            });

                // Track original role state
            $('.role-checkbox:checked').each(function() {
            originalRoles.push($(this).val());
        });
            // Show changes in real-time
        $('.role-checkbox').change(function() {
            let currentRoles = [];
            $('.role-checkbox:checked').each(function() {
                currentRoles.push($(this).val());
            });

            // Show indicator if changes were made
            let hasChanges = !arraysEqual(originalRoles.sort(), currentRoles.sort());
            if (hasChanges) {
                $('#roleChangeIndicator').show();
            } else {
                $('#roleChangeIndicator').hide();
            }
        });

        function arraysEqual(a, b) {
            return JSON.stringify(a) === JSON.stringify(b);
        }
        });

        function loadUserPermissionsStatus() {
            $.ajax({
                url: '@Url.Action("GetUserPermissionsStatus", new { id = Model.Id })',
                type: 'GET',
                success: function(data) {
                    if (data.error) {
                        $('#permissionsContainer').html('<p class="text-danger">Failed to load permissions</p>');
                        return;
                    }

                    allPermissions = data;
                    // Store original state to track changes
                    data.forEach(p => {
                        originalPermissions[p.name] = p.isDirect;
                    });

                    renderPermissions(data);
                },
                error: function() {
                    $('#permissionsContainer').html('<p class="text-danger">Error loading permissions</p>');
                }
            });
        }

                function renderPermissions(permissions) {
            // Separate direct and available permissions
            const directPermissions = permissions.filter(p => p.isDirect);
            const availablePermissions = permissions.filter(p => !p.isDirect && !p.isFromRole);
            const rolePermissions = permissions.filter(p => p.isFromRole && !p.isDirect);

            let html = '<div class="permissions-container">';

            // Current Direct Permissions Section
            if (directPermissions.length > 0) {
                html += `
                    <div class="permissions-section mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-check-circle"></i> Current Direct Permissions
                        </h6>
                        <div class="row">
                `;

                directPermissions.forEach(perm => {
                    html += `
                        <div class="col-md-6 mb-2">
                            <div class="permission-item current-permission p-2 border rounded bg-light">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox"
                                           id="perm_${perm.name}"
                                           data-permission-name="${perm.name}"
                                           checked>
                                    <label class="form-check-label" for="perm_${perm.name}">
                                        <strong>${perm.name}</strong>
                                        <small class="d-block text-muted">${perm.description}</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                });

                html += '</div></div>';
            }

            // Permissions from Roles Section
            if (rolePermissions.length > 0) {
                html += `
                    <div class="permissions-section mb-4">
                        <h6 class="text-info mb-3">
                            <i class="fas fa-shield-alt"></i> Permissions from Roles (Read-only)
                        </h6>
                        <div class="row">
                `;

                rolePermissions.forEach(perm => {
                    html += `
                        <div class="col-md-6 mb-2">
                            <div class="permission-item role-permission p-2 border rounded bg-light opacity-75">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox"
                                           id="perm_role_${perm.name}"
                                           checked disabled>
                                    <label class="form-check-label" for="perm_role_${perm.name}">
                                        <strong>${perm.name}</strong>
                                        <small class="d-block text-muted">${perm.description}</small>
                                        <small class="text-info"><i class="fas fa-lock"></i> From: ${perm.roles.join(', ')}</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                });

                html += '</div></div>';
            }

            // Available Permissions to Add Section
            if (availablePermissions.length > 0) {
                html += `
                    <div class="permissions-section">
                        <h6 class="text-success mb-3">
                            <i class="fas fa-plus-circle"></i> Available Permissions to Add
                        </h6>
                        <div class="row">
                `;

                availablePermissions.forEach(perm => {
                    html += `
                        <div class="col-md-6 mb-2">
                            <div class="permission-item available-permission p-2 border rounded">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox"
                                           id="perm_${perm.name}"
                                           data-permission-name="${perm.name}">
                                    <label class="form-check-label" for="perm_${perm.name}">
                                        <strong>${perm.name}</strong>
                                        <small class="d-block text-muted">${perm.description}</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                });

                html += '</div></div>';
            }

            html += '</div>';
            $('#permissionsContainer').html(html);
        }

        function filterPermissions(searchTerm) {
            $('.permission-item').each(function() {
                const text = $(this).text().toLowerCase();
                $(this).toggle(text.includes(searchTerm));
            });
        }

        function savePermissions() {
            const changes = [];

            // Check each permission for changes
            $('input[data-permission-name]').each(function() {
                const permName = $(this).data('permission-name');
                const isChecked = $(this).is(':checked');
                const wasOriginallyDirect = originalPermissions[permName] || false;

                // Only process if not disabled (not from role) and state changed
                if (!$(this).is(':disabled') && isChecked !== wasOriginallyDirect) {
                    changes.push({
                        permissionName: permName,
                        action: isChecked ? 'grant' : 'revoke'
                    });
                }
            });

            if (changes.length === 0) {
                showToast('No permission changes to save', 'info');
                return;
            }

            // Process changes
            let processed = 0;
            const errors = [];

            changes.forEach(change => {
                const url = change.action === 'grant'
                    ? '@Url.Action("GrantPermission", new { id = Model.Id })'
                    : '@Url.Action("RevokePermission", new { id = Model.Id })';

                $.ajax({
                    url: url,
                    type: 'POST',
                    data: JSON.stringify({ permissionName: change.permissionName }),
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function() {
                        processed++;
                        if (processed === changes.length) {
                            showToast(`Successfully updated ${changes.length} permission(s)`, 'success');
                            loadUserPermissionsStatus(); // Reload to refresh the view
                        }
                    },
                    error: function() {
                        errors.push(change.permissionName);
                        processed++;
                        if (processed === changes.length) {
                            if (errors.length > 0) {
                                showToast(`Failed to update ${errors.length} permission(s)`, 'error');
                            }
                        }
                    }
                });
            });
        }
    </script>
}

<style>
    .permission-item {
        border: 1px solid transparent;
        border-radius: 0.25rem;
        transition: all 0.2s;
    }

        .permission-item:hover {
            border-color: #dee2e6;
            background-color: #f8f9fa !important;
        }

    .accordion-button:not(.collapsed) {
        background-color: #e7f1ff;
        color: #0c63e4;
    }

    .form-check-input:disabled {
        opacity: 0.5;
    }

        .form-check-input:disabled ~ label {
            opacity: 0.7;
        }

    .permissions-container {
        max-height: 600px;
        overflow-y: auto;
    }

    .permissions-section {
        margin-bottom: 2rem;
    }

    .current-permission {
        background-color: #e8f5e9 !important;
        border-color: #4caf50 !important;
    }

    .role-permission {
        background-color: #e3f2fd !important;
        border-color: #2196f3 !important;
    }

    .available-permission:hover {
        background-color: #f5f5f5;
        cursor: pointer;
    }

    .permission-item {
        transition: all 0.3s ease;
    }

        .permission-item.current-permission:hover {
            box-shadow: 0 2px 4px rgba(76, 175, 80, 0.3);
        }
</style>