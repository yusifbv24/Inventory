# Main context - these settings apply globally
events {
    worker_connections 1024;  # How many connections each worker can handle
}

http {
    # Security headers - these protect against common attacks
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80;
        server_name inventory166.az;
        return 301 https://$server_name$request_uri;
    }

    # Main HTTPS server configuration
    server {
        listen 443 ssl http2;  # Enable SSL and HTTP/2 for better performance
        server_name inventory166.az;

        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/inventory166.crt;
        ssl_certificate_key /etc/nginx/ssl/inventory166.key;

        # Strong SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;  # Only use modern, secure protocols
        ssl_ciphers HIGH:!aNULL:!MD5;    # Use strong encryption ciphers
        ssl_prefer_server_ciphers on;     # Server chooses the cipher

        # Logging for monitoring and debugging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Proxy all requests to your application
        location / {
            proxy_pass http://app:5051;  # 'app' is the service name in docker-compose
            proxy_http_version 1.1;
            
            # Headers to pass client information to your app
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_cache_bypass $http_upgrade;
        }

        # Increase upload size if needed (default is 1MB)
        client_max_body_size 10M;
    }
}