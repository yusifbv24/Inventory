// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RouteService.Infrastructure.Data;

#nullable disable

namespace RouteService.Infrastructure.Migrations
{
    [DbContext(typeof(RouteDbContext))]
    partial class RouteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RouteService.Domain.Entities.InventoryRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FromDepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("FromDepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FromWorker")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RouteType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ToDepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("ToDepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ToWorker")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FromDepartmentId")
                        .HasDatabaseName("IX_InventoryRoutes_FromDepartmentId");

                    b.HasIndex("ToDepartmentId")
                        .HasDatabaseName("IX_InventoryRoutes_ToDepartmentId");

                    b.ToTable("InventoryRoutes");
                });

            modelBuilder.Entity("RouteService.Domain.Entities.InventoryRoute", b =>
                {
                    b.OwnsOne("RouteService.Domain.ValueObjects.ProductSnapshot", "ProductSnapshot", b1 =>
                        {
                            b1.Property<int>("InventoryRouteId")
                                .HasColumnType("integer");

                            b1.Property<string>("CategoryName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("CategoryName");

                            b1.Property<int>("InventoryCode")
                                .HasColumnType("integer")
                                .HasColumnName("InventoryCode");

                            b1.Property<bool>("IsWorking")
                                .HasColumnType("boolean")
                                .HasColumnName("IsWorking");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Model");

                            b1.Property<int>("ProductId")
                                .HasColumnType("integer")
                                .HasColumnName("ProductId");

                            b1.Property<string>("Vendor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Vendor");

                            b1.HasKey("InventoryRouteId");

                            b1.HasIndex("ProductId")
                                .HasDatabaseName("IX_InventoryRoutes_ProductId");

                            b1.ToTable("InventoryRoutes");

                            b1.WithOwner()
                                .HasForeignKey("InventoryRouteId");
                        });

                    b.Navigation("ProductSnapshot")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
