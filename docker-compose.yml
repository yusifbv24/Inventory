version: '3.8'

services:
  # PostgreSQL Database - The foundation of your data layer
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Ak030692
      # This creates all databases at startup
      POSTGRES_MULTIPLE_DATABASES: "identity_service,product_service,route_service,approval_service,notification_service"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Message broker for async communication
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: inventory_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    restart: unless-stopped

  # Identity Service - Authentication and authorization
  identity-service:
    build:
      context: ./src
      dockerfile: IdentityService.API/Dockerfile
    container_name: inventory_identity
    environment:
      - TZ=Asia/Baku
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=identity_service;Username=postgres;Password=Ak030692;
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      # Simple console logging instead of Seq
      - Logging__LogLevel__Default=Information
    ports:
      - "5003:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  # Product Service - Product management
  product-service:
    build:
      context: ./src
      dockerfile: ProductService.API/Dockerfile
    container_name: inventory_product
    user: "root"  # Required for file write permissions
    environment:
      - TZ=Asia/Baku
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=product_service;Username=postgres;Password=Ak030692;
      - RabbitMQ__HostName=rabbitmq
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - Logging__LogLevel__Default=Information
    ports:
      - "5001:80"
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - ./storage/images/products:/app/wwwroot/images/products:rw
    networks:
      - backend
    restart: unless-stopped

  # Route Service - Transfer management
  route-service:
    build:
      context: ./src
      dockerfile: RouteService.API/Dockerfile
    container_name: inventory_route
    user: "root"
    environment:
      - TZ=Asia/Baku
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=route_service;Username=postgres;Password=Ak030692;
      - ProductService__BaseUrl=http://product-service
      - RabbitMQ__HostName=rabbitmq
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - Logging__LogLevel__Default=Information
    ports:
      - "5002:80"
    depends_on:
      - postgres
      - rabbitmq
      - product-service
    volumes:
      - ./storage/images/routes:/app/wwwroot/images/routes:rw
    networks:
      - backend
    restart: unless-stopped

  # Approval Service - Workflow management
  approval-service:
    build:
      context: ./src
      dockerfile: ApprovalService.API/Dockerfile
    container_name: inventory_approval
    environment:
      - TZ=Asia/Baku
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=approval_service;Username=postgres;Password=Ak030692;
      - RabbitMQ__HostName=rabbitmq
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - Services__ProductService=http://api-gateway
      - Services__RouteService=http://api-gateway
      - Logging__LogLevel__Default=Information
    ports:
      - "5004:80"    
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - backend
    restart: unless-stopped

  # Notification Service - Real-time notifications
  notification-service:
    build:
      context: ./src
      dockerfile: NotificationService.API/Dockerfile
    container_name: inventory_notification
    environment:
      - TZ=Asia/Baku
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=notification_service;Username=postgres;Password=Ak030692;
      - RabbitMQ__HostName=rabbitmq
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - WhatsApp__Enabled=true
      - WhatsApp__ApiUrl=https://7103.api.greenapi.com
      - WhatsApp__IdInstance=7103295570
      - WhatsApp__ApiTokenInstance=d3fcc0421df2463a85579688ea2c1625f973a6674d974cdba5
      - WhatsApp__DefaultGroupId=120363416701721102@g.us
      - Logging__LogLevel__Default=Information
    ports:
      - "5005:80"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - backend
    restart: unless-stopped

  # API Gateway - Central routing
  api-gateway:
    build:
      context: ./src/ApiGateway
      dockerfile: Dockerfile
    container_name: inventory_gateway
    environment:
      - TZ=Asia/Baku
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - Logging__LogLevel__Default=Information
    ports:
      - "5000:80"
    networks:
      - backend
      - frontend
    restart: unless-stopped

  # Web Application - User interface
  web:
    build:
      context: ./src
      dockerfile: InventoryManagement.Web/Dockerfile
    container_name: inventory_web
    environment:
      - TZ=Asia/Baku
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ApiGateway__BaseUrl=http://api-gateway
      - NotificationService__BaseUrl=http://notification-service
      - Logging__LogLevel__Default=Information
    depends_on:
      - api-gateway
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Nginx - Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./storage/images/products:/app/storage/images/products:ro
      - ./storage/images/routes:/app/storage/images/routes:ro
    depends_on:
      - web
      - api-gateway
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Monitoring Services
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: inventory_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - backend
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: inventory_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=Admin123!
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend
    restart: unless-stopped

  # Portainer - Docker management UI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: inventory_portainer
    ports:
      - "9443:9443"
      - "8001:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - backend
    restart: unless-stopped

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  portainer_data: