version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    ports:
      - "80:80" 
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - frontend
      - backend
    restart: always

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: inventory_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres_identity:
    image: postgres:15-alpine
    container_name: inventory_postgres_identity
    environment:
      POSTGRES_DB: identity_service
      POSTGRES_USER: ${IDENTITY_DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_identity_data:/var/lib/postgresql/data
      - ./backups/identity:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IDENTITY_DB_USER} -d identity_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_product:
    image: postgres:15-alpine
    container_name: inventory_postgres_product
    environment:
      POSTGRES_DB: product_service
      POSTGRES_USER: ${PRODUCT_DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
      - ./backups/product:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCT_DB_USER} -d product_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_route:
    image: postgres:15-alpine
    container_name: inventory_postgres_route
    environment:
      POSTGRES_DB: route_service
      POSTGRES_USER: ${ROUTE_DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_route_data:/var/lib/postgresql/data
      - ./backups/route:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ROUTE_DB_USER} -d route_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_approval:
    image: postgres:15-alpine
    container_name: inventory_postgres_approval
    environment:
      POSTGRES_DB: approval_service
      POSTGRES_USER: ${APPROVAL_DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_approval_data:/var/lib/postgresql/data
      - ./backups/approval:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APPROVAL_DB_USER} -d approval_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_notification:
    image: postgres:15-alpine
    container_name: inventory_postgres_notification
    environment:
      POSTGRES_DB: notification_service
      POSTGRES_USER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_notification_data:/var/lib/postgresql/data
      - ./backups/notification:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_DB_USER} -d notification_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  
  identity-service:
      image: inventory/identity-service:latest
      build:
        context: ./src
        dockerfile: IdentityService.API/Dockerfile
      container_name: inventory_identity_service
      environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_identity;Database=identity_service;Username=${IDENTITY_DB_USER};Password=${DB_PASSWORD};
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      depends_on:
        postgres_identity:
          condition: service_healthy 
      networks:
        - backend
      restart: always
      
  product-service:
    image: inventory/product-service:latest
    build:
      context: ./src
      dockerfile: ProductService.API/Dockerfile
    container_name: inventory_product_service
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_product;Database=product_service;Username=${PRODUCT_DB_USER};Password=${DB_PASSWORD};
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres_product
      - rabbitmq
    volumes:
      - ./storage/images/products:/app/wwwroot/images/products
    networks:
      - backend
    restart: always

  route-service:
    image: inventory/route-service:latest
    build:
      context: ./src
      dockerfile: RouteService.API/Dockerfile
    container_name: inventory_route_service
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_route;Database=route_service;Username=${ROUTE_DB_USER};Password=${DB_PASSWORD};
      - ProductService__BaseUrl=http://product-service
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres_route
      - rabbitmq
      - product-service
    volumes:
      - ./storage/images/routes:/app/wwwroot/images/routes
    networks:
      - backend
    restart: always

  approval-service:
    image: inventory/approval-service:latest
    build:
      context: ./src
      dockerfile: ApprovalService.API/Dockerfile
    container_name: inventory_approval_service
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_approval;Database=approval_service;Username=${APPROVAL_DB_USER};Password=${DB_PASSWORD};
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Services__ProductService=http://api-gateway
      - Services__RouteService=http://api-gateway
    depends_on:
      - postgres_approval
      - rabbitmq
    networks:
      - backend
    restart: always

  notification-service:
    image: inventory/notification-service:latest
    build:
      context: ./src
      dockerfile: NotificationService.API/Dockerfile
    container_name: inventory_notification_service
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_notification;Database=notification_service;Username=${NOTIFICATION_DB_USER};Password=${DB_PASSWORD};
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - WHATSAPP_ID=${WHATSAPP_ID}
      - WHATSAPP_APITOKEN=${WHATSAPP_APITOKEN}
      - WHATSAPP_GROUPID=${WHATSAPP_GROUPID}
    depends_on:
      postgres_notification:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    restart: always

  # API Gateway - Internal traffic coordinator
  api-gateway:
    image: inventory-api-gateway:latest
    build:
      context: ./src/ApiGateway
      dockerfile: Dockerfile
    container_name: inventory_api_gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - identity-service
      - product-service
      - route-service
      - approval-service
      - notification-service
    networks:
      - backend
      - frontend
    restart: always

  # Web Application
  web:
    build:
      context: ./src
      dockerfile: InventoryManagement.Web/Dockerfile
    container_name: inventory_web
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ApiGateway__BaseUrl=https://api.inventory166.az
      - ConnectionStrings__Seq=http://seq:5342
    depends_on:
      - api-gateway
    networks:
      - frontend
      - backend
    restart: always
    volumes:
      - ./logs/web:/app/logs
    healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:80/health"]
    interval: 30s
    timeout: 10s
    retries: 5
    start_period: 40s

  # Seq for centralized logging (optional but recommended)
  seq:
    image: datalust/seq:latest
    container_name: inventory_seq
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORD=Admin123!
    ports:
      - "5342:80"
    volumes:
      - seq_data:/data
    networks:
      - backend
    restart: always

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true  # This makes the backend network not directly accessible from outside


volumes:
  rabbitmq_data:
  postgres_identity_data:
  postgres_product_data:
  postgres_route_data:
  postgres_approval_data:
  postgres_notification_data:
  seq_data:
  nginx_logs: