version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    ports:
      - "80:80" 
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
    depends_on:
      - api-gateway
      - web
    networks:
      - frontend
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: inventory_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-9b34v9Nfn'sg}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    restart: unless-stopped

  postgres_identity:
    image: postgres:15-alpine
    container_name: inventory_postgres_identity
    environment:
      POSTGRES_DB: identity_service
      POSTGRES_USER: identity_user
      POSTGRES_PASSWORD: ${DB_PASSWORD_IDENTITY:-24QdG~/0iPpm}
    volumes:
      - postgres_identity_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  postgres_product:
    image: postgres:15-alpine
    container_name: inventory_postgres_product
    environment:
      POSTGRES_DB: product_service
      POSTGRES_USER: product_user
      POSTGRES_PASSWORD: ${DB_PASSWORD_PRODUCT:-6nkvJ7R8y-IU}
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  postgres_route:
    image: postgres:15-alpine
    container_name: inventory_postgres_route
    environment:
      POSTGRES_DB: route_service
      POSTGRES_USER: route_user
      POSTGRES_PASSWORD: ${DB_PASSWORD_ROUTE:-@%6gH1|1X4ih}
    volumes:
      - postgres_route_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  postgres_approval:
    image: postgres:15-alpine
    container_name: inventory_postgres_approval
    environment:
      POSTGRES_DB: approval_service
      POSTGRES_USER: approval_user
      POSTGRES_PASSWORD: ${DB_PASSWORD_APPROVAL:-6CK2z%%n$MW5}
    volumes:
      - postgres_approval_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  postgres_notification:
    image: postgres:15-alpine
    container_name: inventory_postgres_notification
    environment:
      POSTGRES_DB: notification_service
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: ${DB_PASSWORD_NOTIFICATION:-t)ro8XP7I5(D}
    volumes:
      - postgres_notification_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  
  identity-service:
    build:
      context: ./IdentityService.API
      dockerfile: Dockerfile
    container_name: inventory_identity_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_identity;Database=identity_service;Username=identity_user;Password=${DB_PASSWORD_IDENTITY:-24QdG~/0iPpm}
      - Jwt__Key=${JWT_KEY:-ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()}
    depends_on:
      - postgres_identity
    networks:
      - backend
    restart: unless-stopped

  product-service:
    build:
      context: ./ProductService.API
      dockerfile: Dockerfile
    container_name: inventory_product_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_product;Database=product_service;Username=product_user;Password=${DB_PASSWORD_PRODUCT:-6nkvJ7R8y-IU}
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER:-admin}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-9b34v9Nfn'sg}
      - Jwt__Key=${JWT_KEY:-ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()}
    depends_on:
      - postgres_product
      - rabbitmq
    volumes:
      - ./storage/images/products:/app/wwwroot/images/products
    networks:
      - backend
    restart: unless-stopped

  route-service:
    build:
      context: ./RouteService.API
      dockerfile: Dockerfile
    container_name: inventory_route_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_route;Database=route_service;Username=route_user;Password=${DB_PASSWORD_ROUTE:-@%6gH1|1X4ih}
      - ProductService__BaseUrl=http://product-service
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER:-admin}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-9b34v9Nfn'sg}
      - Jwt__Key=${JWT_KEY:-ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()}
    depends_on:
      - postgres_route
      - rabbitmq
      - product-service
    volumes:
      - ./storage/images/routes:/app/wwwroot/images/routes
    networks:
      - backend
    restart: unless-stopped

  approval-service:
    build:
      context: ./ApprovalService.API
      dockerfile: Dockerfile
    container_name: inventory_approval_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_approval;Database=approval_service;Username=approval_user;Password=${DB_PASSWORD_APPROVAL:-6CK2z%%n$MW5}
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER:-admin}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-9b34v9Nfn'sg}
      - Jwt__Key=${JWT_KEY:-ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()}
      - Services__ProductService=http://api-gateway
      - Services__RouteService=http://api-gateway
    depends_on:
      - postgres_approval
      - rabbitmq
    networks:
      - backend
    restart: unless-stopped

  notification-service:
    build:
      context: ./NotificationService.API
      dockerfile: Dockerfile
    container_name: inventory_notification_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_notification;Database=notification_service;Username=notification_user;Password=${DB_PASSWORD_NOTIFICATION:-t)ro8XP7I5(D}
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER:-admin}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-9b34v9Nfn'sg}
      - Jwt__Key=${JWT_KEY:-ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()}
      - Services__IdentityService=http://api-gateway
    depends_on:
      - postgres_notification
      - rabbitmq
    networks:
      - backend
    restart: unless-stopped

  # API Gateway - Internal traffic coordinator
  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: inventory_api_gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - Jwt__Key=${JWT_KEY:-ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()}
    depends_on:
      - identity-service
      - product-service
      - route-service
      - approval-service
      - notification-service
    networks:
      - backend
      - frontend
    restart: unless-stopped

  # Web Application
  web:
    build:
      context: ./InventoryManagement.Web
      dockerfile: Dockerfile
    container_name: inventory_web
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ApiGateway__BaseUrl=http://api-gateway
      - ConnectionStrings__Seq=http://seq:5341
    depends_on:
      - api-gateway
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Seq for centralized logging (optional but recommended)
  seq:
    image: datalust/seq:latest
    container_name: inventory_seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    volumes:
      - seq_data:/data
    networks:
      - backend
    restart: unless-stopped

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true  # This makes the backend network not directly accessible from outside

volumes:
  rabbitmq_data:
  postgres_identity_data:
  postgres_product_data:
  postgres_route_data:
  postgres_approval_data:
  postgres_notification_data:
  seq_data: