services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: inventory_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Identity Service with Seq logging
  identity-service:
    build:
      context: ./src
      dockerfile: IdentityService.API/Dockerfile
    container_name: inventory_identity_service
    environment:
      - TZ=${TZ}
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=host.docker.internal;Database=identity_service;Username=${DB_USER_PASSWORD};Password=${POSTGRES_PASSWORD};
      - ConnectionStrings__Seq=http://seq:80 # This tells the service where to send logs
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - seq
      - host.docker.internal
    networks:
      - backend
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Product Service with Seq logging and fixed file permissions
  product-service:
    build:
      context: ./src
      dockerfile: ProductService.API/Dockerfile
    container_name: inventory_product_service
    user: "root"  # Run as root to ensure write permissions
    environment:
      - TZ=${TZ}
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=host.docker.internal;Database=product_service;Username=${DB_USER_PASSWORD};Password=${POSTGRES_PASSWORD};
      - ConnectionStrings__Seq=http://seq:80
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - host.docker.internal
      - rabbitmq
      - seq
    volumes:
      - ./storage/images/products:/app/wwwroot/images/products:rw
    networks:
      - backend
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Route Service with Seq logging
  route-service:
    build:
      context: ./src
      dockerfile: RouteService.API/Dockerfile
    container_name: inventory_route_service
    user: "root"
    environment:
      - TZ=${TZ}
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=host.docker.internal;Database=route_service;Username=${DB_USER_PASSWORD};Password=${POSTGRES_PASSWORD};
      - ConnectionStrings__Seq=http://seq:80
      - ProductService__BaseUrl=http://product-service
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - host.docker.internal
      - rabbitmq
      - product-service
      - seq
    volumes:
      - ./storage/images/routes:/app/wwwroot/images/routes:rw
    networks:
      - backend
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Approval Service with Seq logging
  approval-service:
    build:
      context: ./src
      dockerfile: ApprovalService.API/Dockerfile
    container_name: inventory_approval_service
    environment:
      - TZ=${TZ}
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=host.docker.internal;Database=approval_service;Username=${DB_USER_PASSWORD};Password=${POSTGRES_PASSWORD};
      - ConnectionStrings__Seq=http://seq:80
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Services__ProductService=http://api-gateway
      - Services__RouteService=http://api-gateway
    depends_on:
      - postgres
      - rabbitmq
      - seq
    networks:
      - backend
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Notification Service with Seq logging
  notification-service:
    build:
      context: ./src
      dockerfile: NotificationService.API/Dockerfile
    container_name: inventory_notification_service
    environment:
      - TZ=${TZ}
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=host.docker.internal;Database=notification_service;Username=${DB_USER_PASSWORD};Password=${POSTGRES_PASSWORD};
      - ConnectionStrings__Seq=http://seq:80
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - WhatsApp__ApiUrl=https://7103.api.greenapi.com
      - WhatsApp__MediaUrl=https://7103.media.greenapi.com
      - WhatsApp__IdInstance=${WHATSAPP_INSTANCE_ID}
      - WhatsApp__ApiTokenInstance=${WHATSAPP_API_TOKEN}
      - WhatsApp__DefaultGroupId=${WHATSAPP_GROUP_ID}
      - WhatsApp__Enabled=true
    depends_on:
      - host.docker.internal
      - rabbitmq
      - seq
    networks:
      - backend
    restart: always


  # API Gateway with Seq logging
  api-gateway:
    build:
      context: ./src/ApiGateway
      dockerfile: Dockerfile
    container_name: inventory_api_gateway
    environment:
      - TZ=${TZ}
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Seq=http://seq:80
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    ports:
      - "5000:80"
    depends_on:
      - seq
    networks:
      - backend
      - frontend
    restart: always

  # Web Application with enhanced Seq logging
  web:
    build:
      context: ./src
      dockerfile: InventoryManagement.Web/Dockerfile
    container_name: inventory_web
    environment:
      - TZ=${TZ}
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:80
      - ApiGateway__BaseUrl=http://api-gateway
      - ConnectionStrings__Seq=http://seq:80
      - NotificationService__BaseUrl=http://notification-service
    depends_on:
      - api-gateway
      - seq
    networks:
      - frontend
      - backend
    restart: always
    volumes:
      - ./logs/web:/app/logs

  # Seq - Centralized logging system (started early so other services can connect)
  seq:
    image: datalust/seq:latest
    container_name: inventory_seq
    environment:
      - TZ=${TZ}
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORD=${SEQ_ADMIN_PASSWORD}
      - SEQ_API_CANONICALURI=http://seq
      - SEQ_CACHE_SYSTEMRAMTARGET=0.2
    ports:
      - "5342:80"
    volumes:
      - seq_data:/data
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
      
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
      - ./storage/images/products:/app/storage/images/products:ro
      - ./storage/images/routes:/app/storage/images/routes:ro
    depends_on:
      - web
      - api-gateway
    networks:
      - frontend
      - backend
    restart: always

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  rabbitmq_data:
  seq_data:
  product_images:
  route_images: