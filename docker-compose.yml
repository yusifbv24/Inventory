services:
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    ports:
      - "80:80" 
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - web
    networks:
      - frontend
    restart: always
    logging:
        driver: "json-file"

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: inventory_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: "9b34v9Nfn'sg"
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres_identity:
    image: postgres:15-alpine
    container_name: inventory_postgres_identity
    environment:
      POSTGRES_DB: identity_service
      POSTGRES_USER: identity_user
      POSTGRES_PASSWORD: "9b34v9Nfn'sg"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_identity_data:/var/lib/postgresql/data
      - ./backups/identity:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U identity_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_product:
    image: postgres:15-alpine
    container_name: inventory_postgres_product
    environment:
      POSTGRES_DB: product_service
      POSTGRES_USER: product_user
      POSTGRES_PASSWORD: "9b34v9Nfn'sg"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
      - ./backups/product:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U product_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_route:
    image: postgres:15-alpine
    container_name: inventory_postgres_route
    environment:
      POSTGRES_DB: route_service
      POSTGRES_USER: route_user
      POSTGRES_PASSWORD: "9b34v9Nfn'sg"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_route_data:/var/lib/postgresql/data
      - ./backups/route:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U route_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_approval:
    image: postgres:15-alpine
    container_name: inventory_postgres_approval
    environment:
      POSTGRES_DB: approval_service
      POSTGRES_USER: approval_user
      POSTGRES_PASSWORD: "9b34v9Nfn'sg"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_approval_data:/var/lib/postgresql/data
      - ./backups/approval:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U approval_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_notification:
    image: postgres:15-alpine
    container_name: inventory_postgres_notification
    environment:
      POSTGRES_DB: notification_service
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: "9b34v9Nfn'sg"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_notification_data:/var/lib/postgresql/data
      - ./backups/notification:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  
  identity-service:
      image: inventory/identity-service:latest
      build:
        context: .
        dockerfile: IdentityService.API/Dockerfile
      container_name: inventory_identity_service
      environment:
        - ASPNETCORE_ENVIRONMENT=Production
        - ASPNETCORE_URLS=http://+:80
        - ConnectionStrings__DefaultConnection=Host=postgres_identity;Database=identity_service;Username=identity_user;Password=9b34v9Nfn'sg;Pooling=true;Maximum Pool Size=20;
        - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()
        - Jwt__Issuer=166Logistics
        - Jwt__Audience=InventorySystemUsers
      depends_on:
        postgres_identity:
          condition: service_healthy 
      networks:
        - backend
      restart: always
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost/health"]
        interval: 30s
        timeout: 10s
        retries: 3

  product-service:
    image: inventory/product-service:latest
    build:
      context: .
      dockerfile: ProductService.API/Dockerfile
    container_name: inventory_product_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_product;Database=product_service;Username=product_user;Password=9b34v9Nfn'sg;Pooling=true;Maximum Pool Size=20;
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password="9b34v9Nfn'sg"
      - RabbitMQ__Port=5672
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
    depends_on:
      - postgres_product
      - rabbitmq
    volumes:
      - ./storage/images/products:/app/wwwroot/images/products
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  route-service:
    image: inventory/route-service:latest
    build:
      context: .
      dockerfile: RouteService.API/Dockerfile
    container_name: inventory_route_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_route;Database=route_service;Username=route_user;Password=9b34v9Nfn'sg;Pooling=true;Maximum Pool Size=20;
      - ProductService__BaseUrl=http://product-service
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password="9b34v9Nfn'sg"
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
    depends_on:
      - postgres_route
      - rabbitmq
      - product-service
    volumes:
      - ./storage/images/routes:/app/wwwroot/images/routes
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  approval-service:
    image: inventory/approval-service:latest
    build:
      context: .
      dockerfile: ApprovalService.API/Dockerfile
    container_name: inventory_approval_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_approval;Database=approval_service;Username=approval_user;Password=9b34v9Nfn'sg;Pooling=true;Maximum Pool Size=20;
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password="9b34v9Nfn'sg"
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - Services__ProductService=http://api-gateway
      - Services__RouteService=http://api-gateway
    depends_on:
      - postgres_approval
      - rabbitmq
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    image: inventory/notification-service:latest
    build:
      context: .
      dockerfile: NotificationService.API/Dockerfile
    container_name: inventory_notification_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres_notification;Database=notification_service;Username=notification_user;Password=9b34v9Nfn'sg;Pooling=true;Maximum Pool Size=20;
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password="9b34v9Nfn'sg"
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - Services__IdentityService=http://api-gateway
      - Services__ProductService=http://product-service
      - WHATSAPP_ID=7103295570
      - WHATSAPP_APITOKEN=d3fcc0421df2463a85579688ea2c1625f973a6674d974cdba5
      - WHATSAPP_GROUPID=120363416701721102@g.us
    depends_on:
      - postgres_notification
      - rabbitmq
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - Internal traffic coordinator
  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: inventory_api_gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025!@#$%^&*()
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
    depends_on:
      - identity-service
      - product-service
      - route-service
      - approval-service
      - notification-service
    networks:
      - backend
      - frontend
    restart: always

  # Web Application
  web:
    image: inventory/web:latest
    build:
      context: .
      dockerfile: InventoryManagement.Web/Dockerfile
    container_name: inventory_web
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ApiGateway__BaseUrl=http://api-gateway
      - ConnectionStrings__Seq=http://seq:5341
    depends_on:
      - api-gateway
    networks:
      - frontend
      - backend
    restart: always
    volumes:
      - ./logs/web:/app/logs

  # Seq for centralized logging (optional but recommended)
  seq:
    image: datalust/seq:latest
    container_name: inventory_seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "127.0.0.1:5341:80"
    volumes:
      - seq_data:/data
    networks:
      - backend
    restart: always

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true  # This makes the backend network not directly accessible from outside


volumes:
  rabbitmq_data:
  postgres_identity_data:
  postgres_product_data:
  postgres_route_data:
  postgres_approval_data:
  postgres_notification_data:
  seq_data:
  nginx_cache: