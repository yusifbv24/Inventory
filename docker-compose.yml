version: '3.8'

services:
  # Single PostgreSQL instance for all services
  # This approach is simpler for small deployments and easier to manage
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres_all
    environment:
      POSTGRES_DB: postgres  # Default database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Ak030692
      # Create multiple databases on startup
      POSTGRES_MULTIPLE_DATABASES: "identity_service,product_service,route_service,approval_service,notification_service"
    ports:
      - "5432:5432"  # Expose PostgreSQL to external access
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
      - ./backups:/backups
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  # Exposed for external monitoring and management
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: inventory_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Identity Service
  identity-service:
    build:
      context: ./src
      dockerfile: IdentityService.API/Dockerfile
    container_name: inventory_identity_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=identity_service;Username=postgres;Password=Ak030692;
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
    ports:
      - "5001:80"  # Direct access for testing/swagger
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: always

  # Product Service
  product-service:
    build:
      context: ./src
      dockerfile: ProductService.API/Dockerfile
    container_name: inventory_product_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=product_service;Username=postgres;Password=Ak030692;
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
    ports:
      - "5002:80"  # Direct access for testing
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - ./storage/images/products:/app/wwwroot/images/products
    networks:
      - backend
    restart: always

  # Route Service
  route-service:
    build:
      context: ./src
      dockerfile: RouteService.API/Dockerfile
    container_name: inventory_route_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=route_service;Username=postgres;Password=Ak030692;
      - ProductService__BaseUrl=http://product-service
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
    ports:
      - "5003:80"  # Direct access for testing
    depends_on:
      - postgres
      - rabbitmq
      - product-service
    volumes:
      - ./storage/images/routes:/app/wwwroot/images/routes
    networks:
      - backend
    restart: always

  # Approval Service
  approval-service:
    build:
      context: ./src
      dockerfile: ApprovalService.API/Dockerfile
    container_name: inventory_approval_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=approval_service;Username=postgres;Password=Ak030692;
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - Services__ProductService=http://api-gateway
      - Services__RouteService=http://api-gateway
    ports:
      - "5004:80"  # Direct access for testing
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - backend
    restart: always

  # Notification Service
  notification-service:
    build:
      context: ./src
      dockerfile: NotificationService.API/Dockerfile
    container_name: inventory_notification_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=notification_service;Username=postgres;Password=Ak030692;
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
      - WHATSAPP_ID=7103295570
      - WHATSAPP_APITOKEN=d3fcc0421df2463a85579688ea2c1625f973a6674d974cdba5
      - WHATSAPP_GROUPID=120363416701721102@g.us
    ports:
      - "5005:80"  # Direct access for testing
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    restart: always

  # API Gateway - Routes requests to appropriate services
  api-gateway:
    build:
      context: ./src/ApiGateway
      dockerfile: Dockerfile
    container_name: inventory_api_gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - Jwt__Key=ThisIsAVerySecureSecretKeyForJWT2025With32CharsMin!@#$$%
      - Jwt__Issuer=166Logistics
      - Jwt__Audience=InventorySystemUsers
    ports:
      - "5000:80"  # Direct access for API testing
    depends_on:
      - identity-service
      - product-service
      - route-service
      - approval-service
      - notification-service
    networks:
      - backend
      - frontend
    restart: always

  # Web Application - Main user interface
  web:
    build:
      context: ./src
      dockerfile: InventoryManagement.Web/Dockerfile
    container_name: inventory_web
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ApiGateway__BaseUrl=http://api-gateway
      - ConnectionStrings__Seq=http://seq:5342
    depends_on:
      - api-gateway
    networks:
      - frontend
      - backend
    restart: always
    volumes:
      - ./logs/web:/app/logs

  # Seq - Centralized logging system
  # Accessible externally for log monitoring
  seq:
    image: datalust/seq:latest
    container_name: inventory_seq
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORD=Admin123!
    ports:
      - "5342:80"  # Web interface for viewing logs
    volumes:
      - seq_data:/data
    networks:
      - backend
    restart: always

  # Nginx Reverse Proxy - Handles HTTPS and routes traffic
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    ports:
      - "80:80"   # HTTP (redirects to HTTPS)
      - "443:443" # HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - frontend
      - backend
    restart: always

# Network definitions
# Frontend: For public-facing services
# Backend: For internal service communication
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

# Persistent storage volumes
volumes:
  rabbitmq_data:
  postgres_data:
  seq_data: